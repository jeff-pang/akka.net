// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClusterToolsMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.Cluster.Tools.Protobuf.Msg {

  /// <summary>Holder for reflection information generated from ClusterToolsMessages.proto</summary>
  public static partial class ClusterToolsMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for ClusterToolsMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClusterToolsMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpDbHVzdGVyVG9vbHNNZXNzYWdlcy5wcm90bxIfQWtrYS5DbHVzdGVyLlRv",
            "b2xzLlByb3RvYnVmLk1zZyK7AQoGU3RhdHVzEkEKCHZlcnNpb25zGAEgAygL",
            "Mi8uQWtrYS5DbHVzdGVyLlRvb2xzLlByb3RvYnVmLk1zZy5TdGF0dXMuVmVy",
            "c2lvbhIVCg1yZXBseVRvU3RhdHVzGAIgASgIGlcKB1ZlcnNpb24SOQoHYWRk",
            "cmVzcxgBIAEoCzIoLkFra2EuQ2x1c3Rlci5Ub29scy5Qcm90b2J1Zi5Nc2cu",
            "QWRkcmVzcxIRCgl0aW1lc3RhbXAYAiABKAMi+gIKBURlbHRhEj4KB2J1Y2tl",
            "dHMYASADKAsyLS5Ba2thLkNsdXN0ZXIuVG9vbHMuUHJvdG9idWYuTXNnLkRl",
            "bHRhLkJ1Y2tldBorCgtWYWx1ZUhvbGRlchIPCgd2ZXJzaW9uGAEgASgDEgsK",
            "A3JlZhgCIAEoCRqDAgoGQnVja2V0EjcKBW93bmVyGAEgASgLMiguQWtrYS5D",
            "bHVzdGVyLlRvb2xzLlByb3RvYnVmLk1zZy5BZGRyZXNzEg8KB3ZlcnNpb24Y",
            "AiABKAMSSwoHY29udGVudBgDIAMoCzI6LkFra2EuQ2x1c3Rlci5Ub29scy5Q",
            "cm90b2J1Zi5Nc2cuRGVsdGEuQnVja2V0LkNvbnRlbnRFbnRyeRpiCgxDb250",
            "ZW50RW50cnkSCwoDa2V5GAEgASgJEkEKBXZhbHVlGAIgASgLMjIuQWtrYS5D",
            "bHVzdGVyLlRvb2xzLlByb3RvYnVmLk1zZy5EZWx0YS5WYWx1ZUhvbGRlcjoC",
            "OAEiSwoHQWRkcmVzcxIOCgZzeXN0ZW0YASABKAkSEAoIaG9zdG5hbWUYAiAB",
            "KAkSDAoEcG9ydBgDIAEoBRIQCghwcm90b2NvbBgEIAEoCUICSAFiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.Protobuf.Msg.Status), global::Akka.Cluster.Tools.Protobuf.Msg.Status.Parser, new[]{ "Versions", "ReplyToStatus" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.Protobuf.Msg.Status.Types.Version), global::Akka.Cluster.Tools.Protobuf.Msg.Status.Types.Version.Parser, new[]{ "Address", "Timestamp" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.Protobuf.Msg.Delta), global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Parser, new[]{ "Buckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.ValueHolder), global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.ValueHolder.Parser, new[]{ "Version", "Ref" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.Bucket), global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.Bucket.Parser, new[]{ "Owner", "Version", "Content" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.Tools.Protobuf.Msg.Address), global::Akka.Cluster.Tools.Protobuf.Msg.Address.Parser, new[]{ "System", "Hostname", "Port", "Protocol" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Status : pb::IMessage<Status> {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Tools.Protobuf.Msg.ClusterToolsMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      versions_ = other.versions_.Clone();
      replyToStatus_ = other.replyToStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "versions" field.</summary>
    public const int VersionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Akka.Cluster.Tools.Protobuf.Msg.Status.Types.Version> _repeated_versions_codec
        = pb::FieldCodec.ForMessage(10, global::Akka.Cluster.Tools.Protobuf.Msg.Status.Types.Version.Parser);
    private readonly pbc::RepeatedField<global::Akka.Cluster.Tools.Protobuf.Msg.Status.Types.Version> versions_ = new pbc::RepeatedField<global::Akka.Cluster.Tools.Protobuf.Msg.Status.Types.Version>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Cluster.Tools.Protobuf.Msg.Status.Types.Version> Versions {
      get { return versions_; }
    }

    /// <summary>Field number for the "replyToStatus" field.</summary>
    public const int ReplyToStatusFieldNumber = 2;
    private bool replyToStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReplyToStatus {
      get { return replyToStatus_; }
      set {
        replyToStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!versions_.Equals(other.versions_)) return false;
      if (ReplyToStatus != other.ReplyToStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= versions_.GetHashCode();
      if (ReplyToStatus != false) hash ^= ReplyToStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      versions_.WriteTo(output, _repeated_versions_codec);
      if (ReplyToStatus != false) {
        output.WriteRawTag(16);
        output.WriteBool(ReplyToStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += versions_.CalculateSize(_repeated_versions_codec);
      if (ReplyToStatus != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      versions_.Add(other.versions_);
      if (other.ReplyToStatus != false) {
        ReplyToStatus = other.ReplyToStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            versions_.AddEntriesFrom(input, _repeated_versions_codec);
            break;
          }
          case 16: {
            ReplyToStatus = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Status message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Version : pb::IMessage<Version> {
        private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Version> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Tools.Protobuf.Msg.Status.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version(Version other) : this() {
          Address = other.address_ != null ? other.Address.Clone() : null;
          timestamp_ = other.timestamp_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version Clone() {
          return new Version(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private global::Akka.Cluster.Tools.Protobuf.Msg.Address address_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.Cluster.Tools.Protobuf.Msg.Address Address {
          get { return address_; }
          set {
            address_ = value;
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private long timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Version);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Version other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Address, other.Address)) return false;
          if (Timestamp != other.Timestamp) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (address_ != null) hash ^= Address.GetHashCode();
          if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (address_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Address);
          }
          if (Timestamp != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Timestamp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (address_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
          }
          if (Timestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Version other) {
          if (other == null) {
            return;
          }
          if (other.address_ != null) {
            if (address_ == null) {
              address_ = new global::Akka.Cluster.Tools.Protobuf.Msg.Address();
            }
            Address.MergeFrom(other.Address);
          }
          if (other.Timestamp != 0L) {
            Timestamp = other.Timestamp;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (address_ == null) {
                  address_ = new global::Akka.Cluster.Tools.Protobuf.Msg.Address();
                }
                input.ReadMessage(address_);
                break;
              }
              case 16: {
                Timestamp = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Delta : pb::IMessage<Delta> {
    private static readonly pb::MessageParser<Delta> _parser = new pb::MessageParser<Delta>(() => new Delta());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Delta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Tools.Protobuf.Msg.ClusterToolsMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delta(Delta other) : this() {
      buckets_ = other.buckets_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delta Clone() {
      return new Delta(this);
    }

    /// <summary>Field number for the "buckets" field.</summary>
    public const int BucketsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.Bucket> _repeated_buckets_codec
        = pb::FieldCodec.ForMessage(10, global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.Bucket.Parser);
    private readonly pbc::RepeatedField<global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.Bucket> buckets_ = new pbc::RepeatedField<global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.Bucket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.Bucket> Buckets {
      get { return buckets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Delta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Delta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!buckets_.Equals(other.buckets_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= buckets_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buckets_.WriteTo(output, _repeated_buckets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buckets_.CalculateSize(_repeated_buckets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Delta other) {
      if (other == null) {
        return;
      }
      buckets_.Add(other.buckets_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            buckets_.AddEntriesFrom(input, _repeated_buckets_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Delta message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ValueHolder : pb::IMessage<ValueHolder> {
        private static readonly pb::MessageParser<ValueHolder> _parser = new pb::MessageParser<ValueHolder>(() => new ValueHolder());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ValueHolder> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueHolder() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueHolder(ValueHolder other) : this() {
          version_ = other.version_;
          ref_ = other.ref_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueHolder Clone() {
          return new ValueHolder(this);
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 1;
        private long version_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Version {
          get { return version_; }
          set {
            version_ = value;
          }
        }

        /// <summary>Field number for the "ref" field.</summary>
        public const int RefFieldNumber = 2;
        private string ref_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Ref {
          get { return ref_; }
          set {
            ref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ValueHolder);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ValueHolder other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Version != other.Version) return false;
          if (Ref != other.Ref) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Version != 0L) hash ^= Version.GetHashCode();
          if (Ref.Length != 0) hash ^= Ref.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Version != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Version);
          }
          if (Ref.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Ref);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Version != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
          }
          if (Ref.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Ref);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ValueHolder other) {
          if (other == null) {
            return;
          }
          if (other.Version != 0L) {
            Version = other.Version;
          }
          if (other.Ref.Length != 0) {
            Ref = other.Ref;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Version = input.ReadInt64();
                break;
              }
              case 18: {
                Ref = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Bucket : pb::IMessage<Bucket> {
        private static readonly pb::MessageParser<Bucket> _parser = new pb::MessageParser<Bucket>(() => new Bucket());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Bucket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket(Bucket other) : this() {
          Owner = other.owner_ != null ? other.Owner.Clone() : null;
          version_ = other.version_;
          content_ = other.content_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket Clone() {
          return new Bucket(this);
        }

        /// <summary>Field number for the "owner" field.</summary>
        public const int OwnerFieldNumber = 1;
        private global::Akka.Cluster.Tools.Protobuf.Msg.Address owner_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.Cluster.Tools.Protobuf.Msg.Address Owner {
          get { return owner_; }
          set {
            owner_ = value;
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 2;
        private long version_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Version {
          get { return version_; }
          set {
            version_ = value;
          }
        }

        /// <summary>Field number for the "content" field.</summary>
        public const int ContentFieldNumber = 3;
        private static readonly pbc::MapField<string, global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.ValueHolder>.Codec _map_content_codec
            = new pbc::MapField<string, global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.ValueHolder>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.ValueHolder.Parser), 26);
        private readonly pbc::MapField<string, global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.ValueHolder> content_ = new pbc::MapField<string, global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.ValueHolder>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::Akka.Cluster.Tools.Protobuf.Msg.Delta.Types.ValueHolder> Content {
          get { return content_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Bucket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Bucket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Owner, other.Owner)) return false;
          if (Version != other.Version) return false;
          if (!Content.Equals(other.Content)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (owner_ != null) hash ^= Owner.GetHashCode();
          if (Version != 0L) hash ^= Version.GetHashCode();
          hash ^= Content.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (owner_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Owner);
          }
          if (Version != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Version);
          }
          content_.WriteTo(output, _map_content_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (owner_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
          }
          if (Version != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
          }
          size += content_.CalculateSize(_map_content_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Bucket other) {
          if (other == null) {
            return;
          }
          if (other.owner_ != null) {
            if (owner_ == null) {
              owner_ = new global::Akka.Cluster.Tools.Protobuf.Msg.Address();
            }
            Owner.MergeFrom(other.Owner);
          }
          if (other.Version != 0L) {
            Version = other.Version;
          }
          content_.Add(other.content_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (owner_ == null) {
                  owner_ = new global::Akka.Cluster.Tools.Protobuf.Msg.Address();
                }
                input.ReadMessage(owner_);
                break;
              }
              case 16: {
                Version = input.ReadInt64();
                break;
              }
              case 26: {
                content_.AddEntriesFrom(input, _map_content_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Address : pb::IMessage<Address> {
    private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Address> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Cluster.Tools.Protobuf.Msg.ClusterToolsMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address(Address other) : this() {
      system_ = other.system_;
      hostname_ = other.hostname_;
      port_ = other.port_;
      protocol_ = other.protocol_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address Clone() {
      return new Address(this);
    }

    /// <summary>Field number for the "system" field.</summary>
    public const int SystemFieldNumber = 1;
    private string system_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string System {
      get { return system_; }
      set {
        system_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 2;
    private string hostname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hostname {
      get { return hostname_; }
      set {
        hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 4;
    private string protocol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Protocol {
      get { return protocol_; }
      set {
        protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Address);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Address other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (System != other.System) return false;
      if (Hostname != other.Hostname) return false;
      if (Port != other.Port) return false;
      if (Protocol != other.Protocol) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (System.Length != 0) hash ^= System.GetHashCode();
      if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Protocol.Length != 0) hash ^= Protocol.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (System.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(System);
      }
      if (Hostname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Hostname);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Port);
      }
      if (Protocol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Protocol);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (System.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(System);
      }
      if (Hostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Protocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Protocol);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Address other) {
      if (other == null) {
        return;
      }
      if (other.System.Length != 0) {
        System = other.System;
      }
      if (other.Hostname.Length != 0) {
        Hostname = other.Hostname;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Protocol.Length != 0) {
        Protocol = other.Protocol;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            System = input.ReadString();
            break;
          }
          case 18: {
            Hostname = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadInt32();
            break;
          }
          case 34: {
            Protocol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
