// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DistributedPubSubMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.Cluster.PubSub.Serializers.Proto
{

    /// <summary>Holder for reflection information generated from DistributedPubSubMessages.proto</summary>
    public static partial class DistributedPubSubMessagesReflection
    {

        #region Descriptor
        /// <summary>File descriptor for DistributedPubSubMessages.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static DistributedPubSubMessagesReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Ch9EaXN0cmlidXRlZFB1YlN1Yk1lc3NhZ2VzLnByb3RvInsKBlN0YXR1cxIh",
                  "Cgh2ZXJzaW9ucxgBIAMoCzIPLlN0YXR1cy5WZXJzaW9uEhUKDXJlcGx5VG9T",
                  "dGF0dXMYAiABKAgaNwoHVmVyc2lvbhIZCgdhZGRyZXNzGAEgASgLMgguQWRk",
                  "cmVzcxIRCgl0aW1lc3RhbXAYAiABKAMirgEKBURlbHRhEh4KB2J1Y2tldHMY",
                  "ASADKAsyDS5EZWx0YS5CdWNrZXQaMgoFRW50cnkSCwoDa2V5GAEgASgJEg8K",
                  "B3ZlcnNpb24YAiABKAMSCwoDcmVmGAMgASgJGlEKBkJ1Y2tldBIXCgVvd25l",
                  "chgBIAEoCzIILkFkZHJlc3MSDwoHdmVyc2lvbhgCIAEoAxIdCgdjb250ZW50",
                  "GAMgAygLMgwuRGVsdGEuRW50cnkiSwoHQWRkcmVzcxIOCgZzeXN0ZW0YASAB",
                  "KAkSEAoIaG9zdG5hbWUYAiABKAkSDAoEcG9ydBgDIAEoDRIQCghwcm90b2Nv",
                  "bBgEIAEoCSJGCgRTZW5kEgwKBHBhdGgYASABKAkSFQoNbG9jYWxBZmZpbml0",
                  "eRgCIAEoCBIZCgdwYXlsb2FkGAMgASgLMgguUGF5bG9hZCJICglTZW5kVG9B",
                  "bGwSDAoEcGF0aBgBIAEoCRISCgphbGxCdXRTZWxmGAIgASgIEhkKB3BheWxv",
                  "YWQYAyABKAsyCC5QYXlsb2FkIjMKB1B1Ymxpc2gSDQoFdG9waWMYASABKAkS",
                  "GQoHcGF5bG9hZBgDIAEoCzIILlBheWxvYWQiUQoHUGF5bG9hZBIXCg9lbmNs",
                  "b3NlZE1lc3NhZ2UYASABKAwSFAoMc2VyaWFsaXplcklkGAIgASgFEhcKD21l",
                  "c3NhZ2VNYW5pZmVzdBgEIAEoDEJMCiBha2thLmNsdXN0ZXIucHVic3ViLnBy",
                  "b3RvYnVmLm1zZ0gBqgIlQWtrYS5DbHVzdGVyLlB1YlN1Yi5TZXJpYWxpemVy",
                  "cy5Qcm90b2IGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.PubSub.Serializers.Proto.Status), global::Akka.Cluster.PubSub.Serializers.Proto.Status.Parser, new[]{ "Versions", "ReplyToStatus" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version), global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version.Parser, new[]{ "Address", "Timestamp" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.PubSub.Serializers.Proto.Delta), global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Parser, new[]{ "Buckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry), global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry.Parser, new[]{ "Key", "Version", "Ref" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket), global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket.Parser, new[]{ "Owner", "Version", "Content" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.PubSub.Serializers.Proto.Address), global::Akka.Cluster.PubSub.Serializers.Proto.Address.Parser, new[]{ "System", "Hostname", "Port", "Protocol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.PubSub.Serializers.Proto.Send), global::Akka.Cluster.PubSub.Serializers.Proto.Send.Parser, new[]{ "Path", "LocalAffinity", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.PubSub.Serializers.Proto.SendToAll), global::Akka.Cluster.PubSub.Serializers.Proto.SendToAll.Parser, new[]{ "Path", "AllButSelf", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.PubSub.Serializers.Proto.Publish), global::Akka.Cluster.PubSub.Serializers.Proto.Publish.Parser, new[]{ "Topic", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Cluster.PubSub.Serializers.Proto.Payload), global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Parser, new[]{ "EnclosedMessage", "SerializerId", "MessageManifest" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class Status : pb::IMessage<Status>
    {
        private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Status> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Akka.Cluster.PubSub.Serializers.Proto.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Status()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Status(Status other) : this()
        {
            versions_ = other.versions_.Clone();
            replyToStatus_ = other.replyToStatus_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Status Clone()
        {
            return new Status(this);
        }

        /// <summary>Field number for the "versions" field.</summary>
        public const int VersionsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version> _repeated_versions_codec
            = pb::FieldCodec.ForMessage(10, global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version.Parser);
        private readonly pbc::RepeatedField<global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version> versions_ = new pbc::RepeatedField<global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version> Versions
        {
            get { return versions_; }
        }

        /// <summary>Field number for the "replyToStatus" field.</summary>
        public const int ReplyToStatusFieldNumber = 2;
        private bool replyToStatus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ReplyToStatus
        {
            get { return replyToStatus_; }
            set
            {
                replyToStatus_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Status);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Status other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!versions_.Equals(other.versions_)) return false;
            if (ReplyToStatus != other.ReplyToStatus) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= versions_.GetHashCode();
            if (ReplyToStatus != false) hash ^= ReplyToStatus.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            versions_.WriteTo(output, _repeated_versions_codec);
            if (ReplyToStatus != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(ReplyToStatus);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += versions_.CalculateSize(_repeated_versions_codec);
            if (ReplyToStatus != false)
            {
                size += 1 + 1;
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Status other)
        {
            if (other == null)
            {
                return;
            }
            versions_.Add(other.versions_);
            if (other.ReplyToStatus != false)
            {
                ReplyToStatus = other.ReplyToStatus;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            versions_.AddEntriesFrom(input, _repeated_versions_codec);
                            break;
                        }
                    case 16:
                        {
                            ReplyToStatus = input.ReadBool();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Status message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class Version : pb::IMessage<Version>
            {
                private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Version> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Akka.Cluster.PubSub.Serializers.Proto.Status.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Version()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Version(Version other) : this()
                {
                    Address = other.address_ != null ? other.Address.Clone() : null;
                    timestamp_ = other.timestamp_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Version Clone()
                {
                    return new Version(this);
                }

                /// <summary>Field number for the "address" field.</summary>
                public const int AddressFieldNumber = 1;
                private global::Akka.Cluster.PubSub.Serializers.Proto.Address address_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Akka.Cluster.PubSub.Serializers.Proto.Address Address
                {
                    get { return address_; }
                    set
                    {
                        address_ = value;
                    }
                }

                /// <summary>Field number for the "timestamp" field.</summary>
                public const int TimestampFieldNumber = 2;
                private long timestamp_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Timestamp
                {
                    get { return timestamp_; }
                    set
                    {
                        timestamp_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Version);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Version other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (!object.Equals(Address, other.Address)) return false;
                    if (Timestamp != other.Timestamp) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (address_ != null) hash ^= Address.GetHashCode();
                    if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (address_ != null)
                    {
                        output.WriteRawTag(10);
                        output.WriteMessage(Address);
                    }
                    if (Timestamp != 0L)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt64(Timestamp);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (address_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
                    }
                    if (Timestamp != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Version other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.address_ != null)
                    {
                        if (address_ == null)
                        {
                            address_ = new global::Akka.Cluster.PubSub.Serializers.Proto.Address();
                        }
                        Address.MergeFrom(other.Address);
                    }
                    if (other.Timestamp != 0L)
                    {
                        Timestamp = other.Timestamp;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    if (address_ == null)
                                    {
                                        address_ = new global::Akka.Cluster.PubSub.Serializers.Proto.Address();
                                    }
                                    input.ReadMessage(address_);
                                    break;
                                }
                            case 16:
                                {
                                    Timestamp = input.ReadInt64();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class Delta : pb::IMessage<Delta>
    {
        private static readonly pb::MessageParser<Delta> _parser = new pb::MessageParser<Delta>(() => new Delta());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Delta> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Akka.Cluster.PubSub.Serializers.Proto.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Delta()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Delta(Delta other) : this()
        {
            buckets_ = other.buckets_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Delta Clone()
        {
            return new Delta(this);
        }

        /// <summary>Field number for the "buckets" field.</summary>
        public const int BucketsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket> _repeated_buckets_codec
            = pb::FieldCodec.ForMessage(10, global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket.Parser);
        private readonly pbc::RepeatedField<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket> buckets_ = new pbc::RepeatedField<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket> Buckets
        {
            get { return buckets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Delta);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Delta other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!buckets_.Equals(other.buckets_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= buckets_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            buckets_.WriteTo(output, _repeated_buckets_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += buckets_.CalculateSize(_repeated_buckets_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Delta other)
        {
            if (other == null)
            {
                return;
            }
            buckets_.Add(other.buckets_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            buckets_.AddEntriesFrom(input, _repeated_buckets_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Delta message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class Entry : pb::IMessage<Entry>
            {
                private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Entry> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Entry()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Entry(Entry other) : this()
                {
                    key_ = other.key_;
                    version_ = other.version_;
                    ref_ = other.ref_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Entry Clone()
                {
                    return new Entry(this);
                }

                /// <summary>Field number for the "key" field.</summary>
                public const int KeyFieldNumber = 1;
                private string key_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Key
                {
                    get { return key_; }
                    set
                    {
                        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "version" field.</summary>
                public const int VersionFieldNumber = 2;
                private long version_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Version
                {
                    get { return version_; }
                    set
                    {
                        version_ = value;
                    }
                }

                /// <summary>Field number for the "ref" field.</summary>
                public const int RefFieldNumber = 3;
                private string ref_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Ref
                {
                    get { return ref_; }
                    set
                    {
                        ref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Entry);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Entry other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Key != other.Key) return false;
                    if (Version != other.Version) return false;
                    if (Ref != other.Ref) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Key.Length != 0) hash ^= Key.GetHashCode();
                    if (Version != 0L) hash ^= Version.GetHashCode();
                    if (Ref.Length != 0) hash ^= Ref.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Key.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Key);
                    }
                    if (Version != 0L)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt64(Version);
                    }
                    if (Ref.Length != 0)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(Ref);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Key.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
                    }
                    if (Version != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
                    }
                    if (Ref.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ref);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Entry other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Key.Length != 0)
                    {
                        Key = other.Key;
                    }
                    if (other.Version != 0L)
                    {
                        Version = other.Version;
                    }
                    if (other.Ref.Length != 0)
                    {
                        Ref = other.Ref;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    Key = input.ReadString();
                                    break;
                                }
                            case 16:
                                {
                                    Version = input.ReadInt64();
                                    break;
                                }
                            case 26:
                                {
                                    Ref = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class Bucket : pb::IMessage<Bucket>
            {
                private static readonly pb::MessageParser<Bucket> _parser = new pb::MessageParser<Bucket>(() => new Bucket());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Bucket> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Bucket()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Bucket(Bucket other) : this()
                {
                    Owner = other.owner_ != null ? other.Owner.Clone() : null;
                    version_ = other.version_;
                    content_ = other.content_.Clone();
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Bucket Clone()
                {
                    return new Bucket(this);
                }

                /// <summary>Field number for the "owner" field.</summary>
                public const int OwnerFieldNumber = 1;
                private global::Akka.Cluster.PubSub.Serializers.Proto.Address owner_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Akka.Cluster.PubSub.Serializers.Proto.Address Owner
                {
                    get { return owner_; }
                    set
                    {
                        owner_ = value;
                    }
                }

                /// <summary>Field number for the "version" field.</summary>
                public const int VersionFieldNumber = 2;
                private long version_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Version
                {
                    get { return version_; }
                    set
                    {
                        version_ = value;
                    }
                }

                /// <summary>Field number for the "content" field.</summary>
                public const int ContentFieldNumber = 3;
                private static readonly pb::FieldCodec<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry> _repeated_content_codec
                    = pb::FieldCodec.ForMessage(26, global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry.Parser);
                private readonly pbc::RepeatedField<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry> content_ = new pbc::RepeatedField<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry> Content
                {
                    get { return content_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Bucket);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Bucket other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (!object.Equals(Owner, other.Owner)) return false;
                    if (Version != other.Version) return false;
                    if (!content_.Equals(other.content_)) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (owner_ != null) hash ^= Owner.GetHashCode();
                    if (Version != 0L) hash ^= Version.GetHashCode();
                    hash ^= content_.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (owner_ != null)
                    {
                        output.WriteRawTag(10);
                        output.WriteMessage(Owner);
                    }
                    if (Version != 0L)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt64(Version);
                    }
                    content_.WriteTo(output, _repeated_content_codec);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (owner_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
                    }
                    if (Version != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
                    }
                    size += content_.CalculateSize(_repeated_content_codec);
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Bucket other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.owner_ != null)
                    {
                        if (owner_ == null)
                        {
                            owner_ = new global::Akka.Cluster.PubSub.Serializers.Proto.Address();
                        }
                        Owner.MergeFrom(other.Owner);
                    }
                    if (other.Version != 0L)
                    {
                        Version = other.Version;
                    }
                    content_.Add(other.content_);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    if (owner_ == null)
                                    {
                                        owner_ = new global::Akka.Cluster.PubSub.Serializers.Proto.Address();
                                    }
                                    input.ReadMessage(owner_);
                                    break;
                                }
                            case 16:
                                {
                                    Version = input.ReadInt64();
                                    break;
                                }
                            case 26:
                                {
                                    content_.AddEntriesFrom(input, _repeated_content_codec);
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    /// <summary>
    ///*
    /// Defines a remote address.
    /// </summary>
    public sealed partial class Address : pb::IMessage<Address>
    {
        private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Address> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Akka.Cluster.PubSub.Serializers.Proto.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address(Address other) : this()
        {
            system_ = other.system_;
            hostname_ = other.hostname_;
            port_ = other.port_;
            protocol_ = other.protocol_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address Clone()
        {
            return new Address(this);
        }

        /// <summary>Field number for the "system" field.</summary>
        public const int SystemFieldNumber = 1;
        private string system_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string System
        {
            get { return system_; }
            set
            {
                system_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "hostname" field.</summary>
        public const int HostnameFieldNumber = 2;
        private string hostname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Hostname
        {
            get { return hostname_; }
            set
            {
                hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 3;
        private uint port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Port
        {
            get { return port_; }
            set
            {
                port_ = value;
            }
        }

        /// <summary>Field number for the "protocol" field.</summary>
        public const int ProtocolFieldNumber = 4;
        private string protocol_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Protocol
        {
            get { return protocol_; }
            set
            {
                protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Address);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Address other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (System != other.System) return false;
            if (Hostname != other.Hostname) return false;
            if (Port != other.Port) return false;
            if (Protocol != other.Protocol) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (System.Length != 0) hash ^= System.GetHashCode();
            if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
            if (Port != 0) hash ^= Port.GetHashCode();
            if (Protocol.Length != 0) hash ^= Protocol.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (System.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(System);
            }
            if (Hostname.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Hostname);
            }
            if (Port != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(Port);
            }
            if (Protocol.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Protocol);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (System.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(System);
            }
            if (Hostname.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
            }
            if (Port != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
            }
            if (Protocol.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Protocol);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Address other)
        {
            if (other == null)
            {
                return;
            }
            if (other.System.Length != 0)
            {
                System = other.System;
            }
            if (other.Hostname.Length != 0)
            {
                Hostname = other.Hostname;
            }
            if (other.Port != 0)
            {
                Port = other.Port;
            }
            if (other.Protocol.Length != 0)
            {
                Protocol = other.Protocol;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            System = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Hostname = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            Port = input.ReadUInt32();
                            break;
                        }
                    case 34:
                        {
                            Protocol = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///*
    /// Send normally local, but it is also used by the ClusterClient.
    /// </summary>
    public sealed partial class Send : pb::IMessage<Send>
    {
        private static readonly pb::MessageParser<Send> _parser = new pb::MessageParser<Send>(() => new Send());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Send> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Akka.Cluster.PubSub.Serializers.Proto.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Send()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Send(Send other) : this()
        {
            path_ = other.path_;
            localAffinity_ = other.localAffinity_;
            Payload = other.payload_ != null ? other.Payload.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Send Clone()
        {
            return new Send(this);
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 1;
        private string path_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path
        {
            get { return path_; }
            set
            {
                path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "localAffinity" field.</summary>
        public const int LocalAffinityFieldNumber = 2;
        private bool localAffinity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool LocalAffinity
        {
            get { return localAffinity_; }
            set
            {
                localAffinity_ = value;
            }
        }

        /// <summary>Field number for the "payload" field.</summary>
        public const int PayloadFieldNumber = 3;
        private global::Akka.Cluster.PubSub.Serializers.Proto.Payload payload_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.Cluster.PubSub.Serializers.Proto.Payload Payload
        {
            get { return payload_; }
            set
            {
                payload_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Send);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Send other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Path != other.Path) return false;
            if (LocalAffinity != other.LocalAffinity) return false;
            if (!object.Equals(Payload, other.Payload)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Path.Length != 0) hash ^= Path.GetHashCode();
            if (LocalAffinity != false) hash ^= LocalAffinity.GetHashCode();
            if (payload_ != null) hash ^= Payload.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Path.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Path);
            }
            if (LocalAffinity != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(LocalAffinity);
            }
            if (payload_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Payload);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Path.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
            }
            if (LocalAffinity != false)
            {
                size += 1 + 1;
            }
            if (payload_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Send other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Path.Length != 0)
            {
                Path = other.Path;
            }
            if (other.LocalAffinity != false)
            {
                LocalAffinity = other.LocalAffinity;
            }
            if (other.payload_ != null)
            {
                if (payload_ == null)
                {
                    payload_ = new global::Akka.Cluster.PubSub.Serializers.Proto.Payload();
                }
                Payload.MergeFrom(other.Payload);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Path = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            LocalAffinity = input.ReadBool();
                            break;
                        }
                    case 26:
                        {
                            if (payload_ == null)
                            {
                                payload_ = new global::Akka.Cluster.PubSub.Serializers.Proto.Payload();
                            }
                            input.ReadMessage(payload_);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///*
    /// SendToAll normally local, but it is also used by the ClusterClient.
    /// </summary>
    public sealed partial class SendToAll : pb::IMessage<SendToAll>
    {
        private static readonly pb::MessageParser<SendToAll> _parser = new pb::MessageParser<SendToAll>(() => new SendToAll());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SendToAll> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Akka.Cluster.PubSub.Serializers.Proto.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SendToAll()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SendToAll(SendToAll other) : this()
        {
            path_ = other.path_;
            allButSelf_ = other.allButSelf_;
            Payload = other.payload_ != null ? other.Payload.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SendToAll Clone()
        {
            return new SendToAll(this);
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 1;
        private string path_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path
        {
            get { return path_; }
            set
            {
                path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "allButSelf" field.</summary>
        public const int AllButSelfFieldNumber = 2;
        private bool allButSelf_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AllButSelf
        {
            get { return allButSelf_; }
            set
            {
                allButSelf_ = value;
            }
        }

        /// <summary>Field number for the "payload" field.</summary>
        public const int PayloadFieldNumber = 3;
        private global::Akka.Cluster.PubSub.Serializers.Proto.Payload payload_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.Cluster.PubSub.Serializers.Proto.Payload Payload
        {
            get { return payload_; }
            set
            {
                payload_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SendToAll);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SendToAll other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Path != other.Path) return false;
            if (AllButSelf != other.AllButSelf) return false;
            if (!object.Equals(Payload, other.Payload)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Path.Length != 0) hash ^= Path.GetHashCode();
            if (AllButSelf != false) hash ^= AllButSelf.GetHashCode();
            if (payload_ != null) hash ^= Payload.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Path.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Path);
            }
            if (AllButSelf != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(AllButSelf);
            }
            if (payload_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Payload);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Path.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
            }
            if (AllButSelf != false)
            {
                size += 1 + 1;
            }
            if (payload_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SendToAll other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Path.Length != 0)
            {
                Path = other.Path;
            }
            if (other.AllButSelf != false)
            {
                AllButSelf = other.AllButSelf;
            }
            if (other.payload_ != null)
            {
                if (payload_ == null)
                {
                    payload_ = new global::Akka.Cluster.PubSub.Serializers.Proto.Payload();
                }
                Payload.MergeFrom(other.Payload);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Path = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            AllButSelf = input.ReadBool();
                            break;
                        }
                    case 26:
                        {
                            if (payload_ == null)
                            {
                                payload_ = new global::Akka.Cluster.PubSub.Serializers.Proto.Payload();
                            }
                            input.ReadMessage(payload_);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    ///*
    /// Publish normally local, but it is also used by the ClusterClient.
    /// </summary>
    public sealed partial class Publish : pb::IMessage<Publish>
    {
        private static readonly pb::MessageParser<Publish> _parser = new pb::MessageParser<Publish>(() => new Publish());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Publish> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Akka.Cluster.PubSub.Serializers.Proto.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Publish()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Publish(Publish other) : this()
        {
            topic_ = other.topic_;
            Payload = other.payload_ != null ? other.Payload.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Publish Clone()
        {
            return new Publish(this);
        }

        /// <summary>Field number for the "topic" field.</summary>
        public const int TopicFieldNumber = 1;
        private string topic_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Topic
        {
            get { return topic_; }
            set
            {
                topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "payload" field.</summary>
        public const int PayloadFieldNumber = 3;
        private global::Akka.Cluster.PubSub.Serializers.Proto.Payload payload_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Akka.Cluster.PubSub.Serializers.Proto.Payload Payload
        {
            get { return payload_; }
            set
            {
                payload_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Publish);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Publish other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Topic != other.Topic) return false;
            if (!object.Equals(Payload, other.Payload)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Topic.Length != 0) hash ^= Topic.GetHashCode();
            if (payload_ != null) hash ^= Payload.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Topic.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Topic);
            }
            if (payload_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Payload);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Topic.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
            }
            if (payload_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Publish other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Topic.Length != 0)
            {
                Topic = other.Topic;
            }
            if (other.payload_ != null)
            {
                if (payload_ == null)
                {
                    payload_ = new global::Akka.Cluster.PubSub.Serializers.Proto.Payload();
                }
                Payload.MergeFrom(other.Payload);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Topic = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            if (payload_ == null)
                            {
                                payload_ = new global::Akka.Cluster.PubSub.Serializers.Proto.Payload();
                            }
                            input.ReadMessage(payload_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Payload : pb::IMessage<Payload>
    {
        private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Payload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Akka.Cluster.PubSub.Serializers.Proto.DistributedPubSubMessagesReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload(Payload other) : this()
        {
            enclosedMessage_ = other.enclosedMessage_;
            serializerId_ = other.serializerId_;
            messageManifest_ = other.messageManifest_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload Clone()
        {
            return new Payload(this);
        }

        /// <summary>Field number for the "enclosedMessage" field.</summary>
        public const int EnclosedMessageFieldNumber = 1;
        private pb::ByteString enclosedMessage_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString EnclosedMessage
        {
            get { return enclosedMessage_; }
            set
            {
                enclosedMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "serializerId" field.</summary>
        public const int SerializerIdFieldNumber = 2;
        private int serializerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SerializerId
        {
            get { return serializerId_; }
            set
            {
                serializerId_ = value;
            }
        }

        /// <summary>Field number for the "messageManifest" field.</summary>
        public const int MessageManifestFieldNumber = 4;
        private pb::ByteString messageManifest_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString MessageManifest
        {
            get { return messageManifest_; }
            set
            {
                messageManifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Payload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Payload other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EnclosedMessage != other.EnclosedMessage) return false;
            if (SerializerId != other.SerializerId) return false;
            if (MessageManifest != other.MessageManifest) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EnclosedMessage.Length != 0) hash ^= EnclosedMessage.GetHashCode();
            if (SerializerId != 0) hash ^= SerializerId.GetHashCode();
            if (MessageManifest.Length != 0) hash ^= MessageManifest.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EnclosedMessage.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(EnclosedMessage);
            }
            if (SerializerId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(SerializerId);
            }
            if (MessageManifest.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteBytes(MessageManifest);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EnclosedMessage.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(EnclosedMessage);
            }
            if (SerializerId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerializerId);
            }
            if (MessageManifest.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageManifest);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Payload other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EnclosedMessage.Length != 0)
            {
                EnclosedMessage = other.EnclosedMessage;
            }
            if (other.SerializerId != 0)
            {
                SerializerId = other.SerializerId;
            }
            if (other.MessageManifest.Length != 0)
            {
                MessageManifest = other.MessageManifest;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            EnclosedMessage = input.ReadBytes();
                            break;
                        }
                    case 16:
                        {
                            SerializerId = input.ReadInt32();
                            break;
                        }
                    case 34:
                        {
                            MessageManifest = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
