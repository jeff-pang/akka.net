/**
 * Copyright (C) 2009-2017 Typesafe Inc. <http://www.typesafe.com>
 * Copyright (C) 2013-2017 Akka.NET project <https://github.com/akkadotnet/akka.net>
 */

syntax = "proto3";
package Akka.Cluster.Protobuf.Msg;
option optimize_for = SPEED;

/****************************************
 * Internal Cluster Action Messages
 ****************************************/

/**
 * Welcome, reply to Join
 */
message Welcome {
  UniqueAddress from = 1;
  Gossip gossip = 2;
}


/****************************************
 * Cluster Gossip Messages
 ****************************************/

/**
 * Gossip Envelope
 */
message GossipEnvelope {
  UniqueAddress from = 1;
  UniqueAddress to = 2;
  bytes serializedGossip = 3;
}

/**
 * Gossip Status
 */
message GossipStatus {
  UniqueAddress from = 1;
  repeated string allHashes = 2;
  VectorClock version = 3;
}

/**
 * Gossip
 */
message Gossip {
  repeated Member members = 1;
  GossipOverview overview = 2;
  VectorClock version = 3;
}

/**
 * Gossip Overview
 */
message GossipOverview {
  repeated UniqueAddress seen = 1;
  Reachability reachability = 2;
}

/**
 * Reachability
 */
message Reachability {
  message ReachabilityVersion {
	UniqueAddress uniqueAddress = 1;
	int64 version = 2;
  }

  repeated Record records = 1;
  repeated ReachabilityVersion versions = 2;
}

message Record {
  enum ReachabilityStatus {
    Reachable = 0;
    Unreachable = 1;
    Terminated = 2;
  }
  
  UniqueAddress observer = 1;
  UniqueAddress subject = 2;
  ReachabilityStatus status = 3;
  int64 version = 4;
}

/**
 * Member
 */
message Member {
  enum MemberStatus {
    Joining = 0;
    Up = 1;
    Leaving = 2;
    Exiting = 3;
    Down = 4;
    Removed = 5;
  }

  UniqueAddress uniqueAddress = 1;
  int32 upNumber = 2;
  MemberStatus status = 3;
  repeated string roles = 4;
}

/**
 * Vector Clock
 */
message VectorClock {
  message Version {
    string node = 1;
    int64 timestamp = 2;
  }
  repeated Version versions = 1;
}

/****************************************
 * Common Datatypes and Messages
 ****************************************/

message Address {
  string system = 1;
  string hostname = 2;
  int32 port = 3;
  string protocol = 4;
}
 
/**
 * Defines a remote address with uid.
 */
message UniqueAddress {
  Address address = 1;
  uint32 uid = 2;
}
