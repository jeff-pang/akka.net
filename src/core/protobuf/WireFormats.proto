/**
 * Copyright (C) 2009-2017 Typesafe Inc. <http://www.typesafe.com>
 * Copyright (C) 2013-2017 Akka.NET project <https://github.com/akkadotnet/akka.net>
 */

syntax = "proto3";
package Akka.Remote.Protobuf.Msg;
option optimize_for = SPEED;

/******************************************
 * Remoting message formats
 ******************************************/


message AckAndEnvelopeContainer {
  AcknowledgementInfo ack = 1;
  RemoteEnvelope envelope = 2;
}

/**
 * Defines a remote message.
 */
message RemoteEnvelope {
  ActorRefData recipient = 1;
  SerializedMessage message = 2;
  ActorRefData sender = 4;
  fixed64 seq = 5;
}

message AcknowledgementInfo {
  fixed64 cumulativeAck = 1;
  repeated fixed64 nacks = 2;
}

/**
 * Defines a remote ActorRef that "remembers" and uses its original Actor instance
 * on the original node.
 */
message ActorRefData {
  string path = 1;
}

/**
 * Defines a message.
 */
message SerializedMessage {
  bytes message = 1;
  int32 serializerId = 2;
  bytes messageManifest = 3;
}

/**
 * Defines akka.remote.DaemonMsgCreate
 */
message DaemonMsgCreateData {
  PropsData props = 1;
  DeployData deploy = 2;
  string path = 3;
  ActorRefData supervisor = 4;
}

/**
 * Serialization of akka.actor.Props
 */
message PropsData {
  DeployData deploy = 2;
  string clazz = 3;
  bytes args = 4;
  // serialized props parameters
  // older wire protocol: contains class name for each arg
  // newer wire protocol: contains string manifest for each arg
  repeated string manifests = 5;
  // newer wire protocol: serializer id for each arg
  repeated int32 serializerIds = 6;
  // additionally a flag per position to indicate if it was
  // serialized with manifest or not
  repeated bool hasManifest = 7;
}

/**
 * Serialization of akka.actor.Deploy
 */
message DeployData {
  string path = 1;
  bytes config = 2;
  bytes routerConfig = 3;
  bytes scope = 4;
  string dispatcher = 5;
}


/******************************************
 * Akka Protocol message formats
 ******************************************/

/**
 * Message format of Akka Protocol.
 * Message contains either a payload or an instruction.
 */
message AkkaProtocolMessage {
  bytes payload = 1;
  AkkaControlMessage instruction = 2;
}

/**
 * Defines some control messages for the remoting
 */
message AkkaControlMessage {
  CommandType commandType = 1;
  AkkaHandshakeInfo handshakeInfo = 2;
}

message AkkaHandshakeInfo {
  AddressData origin = 1;
  fixed64 uid = 2;
  string cookie = 3;

}

/**
 * Defines the type of the AkkaControlMessage command type
 */
enum CommandType {
  ASSOCIATE = 0;
  DISASSOCIATE = 1;
  HEARTBEAT = 2;
  DISASSOCIATE_SHUTTING_DOWN = 3; // Remote system is going down and will not accepts new connections
  DISASSOCIATE_QUARANTINED = 4;   // Remote system refused the association since the current system is quarantined
}

/**
 * Defines a remote address.
 */
message AddressData {
  string system = 1;
  string hostname = 2;
  uint32 port = 3;
  string protocol = 4;
}