// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestConductorProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TCP
{

    /// <summary>Holder for reflection information generated from TestConductorProtocol.proto</summary>
    public static partial class TestConductorProtocolReflection
    {

        #region Descriptor
        /// <summary>File descriptor for TestConductorProtocol.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static TestConductorProtocolReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChtUZXN0Q29uZHVjdG9yUHJvdG9jb2wucHJvdG8ijgEKB1dyYXBwZXISFQoF",
                  "aGVsbG8YASABKAsyBi5IZWxsbxIeCgdiYXJyaWVyGAIgASgLMg0uRW50ZXJC",
                  "YXJyaWVyEh8KB2ZhaWx1cmUYAyABKAsyDi5JbmplY3RGYWlsdXJlEgwKBGRv",
                  "bmUYBCABKAkSHQoEYWRkchgFIAEoCzIPLkFkZHJlc3NSZXF1ZXN0IjAKBUhl",
                  "bGxvEgwKBG5hbWUYASABKAkSGQoHYWRkcmVzcxgCIAEoCzIILkFkZHJlc3Mi",
                  "RQoMRW50ZXJCYXJyaWVyEgwKBG5hbWUYASABKAkSFgoCb3AYAiABKA4yCi5C",
                  "YXJyaWVyT3ASDwoHdGltZW91dBgDIAEoAyI2Cg5BZGRyZXNzUmVxdWVzdBIM",
                  "CgRub2RlGAEgASgJEhYKBGFkZHIYAiABKAsyCC5BZGRyZXNzIkcKB0FkZHJl",
                  "c3MSEAoIcHJvdG9jb2wYASABKAkSDgoGc3lzdGVtGAIgASgJEgwKBGhvc3QY",
                  "AyABKAkSDAoEcG9ydBgEIAEoBSKKAQoNSW5qZWN0RmFpbHVyZRIaCgdmYWls",
                  "dXJlGAEgASgOMgkuRmFpbFR5cGUSHQoJZGlyZWN0aW9uGAIgASgOMgouRGly",
                  "ZWN0aW9uEhkKB2FkZHJlc3MYAyABKAsyCC5BZGRyZXNzEhAKCHJhdGVNQml0",
                  "GAYgASgCEhEKCWV4aXRWYWx1ZRgHIAEoBSpTCglCYXJyaWVyT3ASFgoSQmFy",
                  "cmllck9wX1JFU0VSVkVEEAASCQoFRW50ZXIQARIICgRGYWlsEAISDQoJU3Vj",
                  "Y2VlZGVkEAMSCgoGRmFpbGVkEAQqdgoIRmFpbFR5cGUSFQoRRmFpbFR5cGVf",
                  "UkVTRVJWRUQQABIMCghUaHJvdHRsZRABEg4KCkRpc2Nvbm5lY3QQAhIJCgVB",
                  "Ym9ydBADEggKBEV4aXQQBBIMCghTaHV0ZG93bhAFEhIKDlNodXRkb3duQWJy",
                  "dXB0EAYqRAoJRGlyZWN0aW9uEhYKEkRpcmVjdGlvbl9SRVNFUlZFRBAAEggK",
                  "BFNlbmQQARILCgdSZWNlaXZlEAISCAoEQm90aBADQiMKGWFra2EucmVtb3Rl",
                  "LnRlc3Rjb25kdWN0b3JIAaoCA1RDUGIGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::TCP.BarrierOp), typeof(global::TCP.FailType), typeof(global::TCP.Direction), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TCP.Wrapper), global::TCP.Wrapper.Parser, new[]{ "Hello", "Barrier", "Failure", "Done", "Addr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCP.Hello), global::TCP.Hello.Parser, new[]{ "Name", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCP.EnterBarrier), global::TCP.EnterBarrier.Parser, new[]{ "Name", "Op", "Timeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCP.AddressRequest), global::TCP.AddressRequest.Parser, new[]{ "Node", "Addr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCP.Address), global::TCP.Address.Parser, new[]{ "Protocol", "System", "Host", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCP.InjectFailure), global::TCP.InjectFailure.Parser, new[]{ "Failure", "Direction", "Address", "RateMBit", "ExitValue" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum BarrierOp
    {
        [pbr::OriginalName("BarrierOp_RESERVED")] Reserved = 0,
        [pbr::OriginalName("Enter")] Enter = 1,
        [pbr::OriginalName("Fail")] Fail = 2,
        [pbr::OriginalName("Succeeded")] Succeeded = 3,
        [pbr::OriginalName("Failed")] Failed = 4,
    }

    public enum FailType
    {
        [pbr::OriginalName("FailType_RESERVED")] Reserved = 0,
        [pbr::OriginalName("Throttle")] Throttle = 1,
        [pbr::OriginalName("Disconnect")] Disconnect = 2,
        [pbr::OriginalName("Abort")] Abort = 3,
        [pbr::OriginalName("Exit")] Exit = 4,
        [pbr::OriginalName("Shutdown")] Shutdown = 5,
        [pbr::OriginalName("ShutdownAbrupt")] ShutdownAbrupt = 6,
    }

    public enum Direction
    {
        [pbr::OriginalName("Direction_RESERVED")] Reserved = 0,
        [pbr::OriginalName("Send")] Send = 1,
        [pbr::OriginalName("Receive")] Receive = 2,
        [pbr::OriginalName("Both")] Both = 3,
    }

    #endregion

    #region Messages
    public sealed partial class Wrapper : pb::IMessage<Wrapper>
    {
        private static readonly pb::MessageParser<Wrapper> _parser = new pb::MessageParser<Wrapper>(() => new Wrapper());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Wrapper> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TCP.TestConductorProtocolReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Wrapper()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Wrapper(Wrapper other) : this()
        {
            Hello = other.hello_ != null ? other.Hello.Clone() : null;
            Barrier = other.barrier_ != null ? other.Barrier.Clone() : null;
            Failure = other.failure_ != null ? other.Failure.Clone() : null;
            done_ = other.done_;
            Addr = other.addr_ != null ? other.Addr.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Wrapper Clone()
        {
            return new Wrapper(this);
        }

        /// <summary>Field number for the "hello" field.</summary>
        public const int HelloFieldNumber = 1;
        private global::TCP.Hello hello_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TCP.Hello Hello
        {
            get { return hello_; }
            set
            {
                hello_ = value;
            }
        }

        /// <summary>Field number for the "barrier" field.</summary>
        public const int BarrierFieldNumber = 2;
        private global::TCP.EnterBarrier barrier_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TCP.EnterBarrier Barrier
        {
            get { return barrier_; }
            set
            {
                barrier_ = value;
            }
        }

        /// <summary>Field number for the "failure" field.</summary>
        public const int FailureFieldNumber = 3;
        private global::TCP.InjectFailure failure_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TCP.InjectFailure Failure
        {
            get { return failure_; }
            set
            {
                failure_ = value;
            }
        }

        /// <summary>Field number for the "done" field.</summary>
        public const int DoneFieldNumber = 4;
        private string done_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Done
        {
            get { return done_; }
            set
            {
                done_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "addr" field.</summary>
        public const int AddrFieldNumber = 5;
        private global::TCP.AddressRequest addr_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TCP.AddressRequest Addr
        {
            get { return addr_; }
            set
            {
                addr_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Wrapper);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Wrapper other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Hello, other.Hello)) return false;
            if (!object.Equals(Barrier, other.Barrier)) return false;
            if (!object.Equals(Failure, other.Failure)) return false;
            if (Done != other.Done) return false;
            if (!object.Equals(Addr, other.Addr)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (hello_ != null) hash ^= Hello.GetHashCode();
            if (barrier_ != null) hash ^= Barrier.GetHashCode();
            if (failure_ != null) hash ^= Failure.GetHashCode();
            if (Done.Length != 0) hash ^= Done.GetHashCode();
            if (addr_ != null) hash ^= Addr.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (hello_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Hello);
            }
            if (barrier_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Barrier);
            }
            if (failure_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Failure);
            }
            if (Done.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Done);
            }
            if (addr_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(Addr);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (hello_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hello);
            }
            if (barrier_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Barrier);
            }
            if (failure_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Failure);
            }
            if (Done.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Done);
            }
            if (addr_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Addr);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Wrapper other)
        {
            if (other == null)
            {
                return;
            }
            if (other.hello_ != null)
            {
                if (hello_ == null)
                {
                    hello_ = new global::TCP.Hello();
                }
                Hello.MergeFrom(other.Hello);
            }
            if (other.barrier_ != null)
            {
                if (barrier_ == null)
                {
                    barrier_ = new global::TCP.EnterBarrier();
                }
                Barrier.MergeFrom(other.Barrier);
            }
            if (other.failure_ != null)
            {
                if (failure_ == null)
                {
                    failure_ = new global::TCP.InjectFailure();
                }
                Failure.MergeFrom(other.Failure);
            }
            if (other.Done.Length != 0)
            {
                Done = other.Done;
            }
            if (other.addr_ != null)
            {
                if (addr_ == null)
                {
                    addr_ = new global::TCP.AddressRequest();
                }
                Addr.MergeFrom(other.Addr);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            if (hello_ == null)
                            {
                                hello_ = new global::TCP.Hello();
                            }
                            input.ReadMessage(hello_);
                            break;
                        }
                    case 18:
                        {
                            if (barrier_ == null)
                            {
                                barrier_ = new global::TCP.EnterBarrier();
                            }
                            input.ReadMessage(barrier_);
                            break;
                        }
                    case 26:
                        {
                            if (failure_ == null)
                            {
                                failure_ = new global::TCP.InjectFailure();
                            }
                            input.ReadMessage(failure_);
                            break;
                        }
                    case 34:
                        {
                            Done = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            if (addr_ == null)
                            {
                                addr_ = new global::TCP.AddressRequest();
                            }
                            input.ReadMessage(addr_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Hello : pb::IMessage<Hello>
    {
        private static readonly pb::MessageParser<Hello> _parser = new pb::MessageParser<Hello>(() => new Hello());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Hello> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TCP.TestConductorProtocolReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hello()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hello(Hello other) : this()
        {
            name_ = other.name_;
            Address = other.address_ != null ? other.Address.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hello Clone()
        {
            return new Hello(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 2;
        private global::TCP.Address address_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TCP.Address Address
        {
            get { return address_; }
            set
            {
                address_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Hello);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Hello other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Name != other.Name) return false;
            if (!object.Equals(Address, other.Address)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (address_ != null) hash ^= Address.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Name.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Name);
            }
            if (address_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Address);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (address_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Hello other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.address_ != null)
            {
                if (address_ == null)
                {
                    address_ = new global::TCP.Address();
                }
                Address.MergeFrom(other.Address);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            if (address_ == null)
                            {
                                address_ = new global::TCP.Address();
                            }
                            input.ReadMessage(address_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class EnterBarrier : pb::IMessage<EnterBarrier>
    {
        private static readonly pb::MessageParser<EnterBarrier> _parser = new pb::MessageParser<EnterBarrier>(() => new EnterBarrier());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EnterBarrier> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TCP.TestConductorProtocolReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnterBarrier()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnterBarrier(EnterBarrier other) : this()
        {
            name_ = other.name_;
            op_ = other.op_;
            timeout_ = other.timeout_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnterBarrier Clone()
        {
            return new EnterBarrier(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "op" field.</summary>
        public const int OpFieldNumber = 2;
        private global::TCP.BarrierOp op_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TCP.BarrierOp Op
        {
            get { return op_; }
            set
            {
                op_ = value;
            }
        }

        /// <summary>Field number for the "timeout" field.</summary>
        public const int TimeoutFieldNumber = 3;
        private long timeout_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timeout
        {
            get { return timeout_; }
            set
            {
                timeout_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as EnterBarrier);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EnterBarrier other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Name != other.Name) return false;
            if (Op != other.Op) return false;
            if (Timeout != other.Timeout) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Op != 0) hash ^= Op.GetHashCode();
            if (Timeout != 0L) hash ^= Timeout.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Name.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Name);
            }
            if (Op != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Op);
            }
            if (Timeout != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(Timeout);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Op != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Op);
            }
            if (Timeout != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timeout);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EnterBarrier other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Op != 0)
            {
                Op = other.Op;
            }
            if (other.Timeout != 0L)
            {
                Timeout = other.Timeout;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            op_ = (global::TCP.BarrierOp)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            Timeout = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AddressRequest : pb::IMessage<AddressRequest>
    {
        private static readonly pb::MessageParser<AddressRequest> _parser = new pb::MessageParser<AddressRequest>(() => new AddressRequest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AddressRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TCP.TestConductorProtocolReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddressRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddressRequest(AddressRequest other) : this()
        {
            node_ = other.node_;
            Addr = other.addr_ != null ? other.Addr.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AddressRequest Clone()
        {
            return new AddressRequest(this);
        }

        /// <summary>Field number for the "node" field.</summary>
        public const int NodeFieldNumber = 1;
        private string node_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Node
        {
            get { return node_; }
            set
            {
                node_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "addr" field.</summary>
        public const int AddrFieldNumber = 2;
        private global::TCP.Address addr_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TCP.Address Addr
        {
            get { return addr_; }
            set
            {
                addr_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AddressRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AddressRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Node != other.Node) return false;
            if (!object.Equals(Addr, other.Addr)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Node.Length != 0) hash ^= Node.GetHashCode();
            if (addr_ != null) hash ^= Addr.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Node.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Node);
            }
            if (addr_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Addr);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Node.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Node);
            }
            if (addr_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Addr);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AddressRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Node.Length != 0)
            {
                Node = other.Node;
            }
            if (other.addr_ != null)
            {
                if (addr_ == null)
                {
                    addr_ = new global::TCP.Address();
                }
                Addr.MergeFrom(other.Addr);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Node = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            if (addr_ == null)
                            {
                                addr_ = new global::TCP.Address();
                            }
                            input.ReadMessage(addr_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Address : pb::IMessage<Address>
    {
        private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Address> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TCP.TestConductorProtocolReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address(Address other) : this()
        {
            protocol_ = other.protocol_;
            system_ = other.system_;
            host_ = other.host_;
            port_ = other.port_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Address Clone()
        {
            return new Address(this);
        }

        /// <summary>Field number for the "protocol" field.</summary>
        public const int ProtocolFieldNumber = 1;
        private string protocol_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Protocol
        {
            get { return protocol_; }
            set
            {
                protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "system" field.</summary>
        public const int SystemFieldNumber = 2;
        private string system_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string System
        {
            get { return system_; }
            set
            {
                system_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "host" field.</summary>
        public const int HostFieldNumber = 3;
        private string host_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Host
        {
            get { return host_; }
            set
            {
                host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 4;
        private int port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Port
        {
            get { return port_; }
            set
            {
                port_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Address);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Address other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Protocol != other.Protocol) return false;
            if (System != other.System) return false;
            if (Host != other.Host) return false;
            if (Port != other.Port) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Protocol.Length != 0) hash ^= Protocol.GetHashCode();
            if (System.Length != 0) hash ^= System.GetHashCode();
            if (Host.Length != 0) hash ^= Host.GetHashCode();
            if (Port != 0) hash ^= Port.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Protocol.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Protocol);
            }
            if (System.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(System);
            }
            if (Host.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Host);
            }
            if (Port != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(Port);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Protocol.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Protocol);
            }
            if (System.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(System);
            }
            if (Host.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
            }
            if (Port != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Address other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Protocol.Length != 0)
            {
                Protocol = other.Protocol;
            }
            if (other.System.Length != 0)
            {
                System = other.System;
            }
            if (other.Host.Length != 0)
            {
                Host = other.Host;
            }
            if (other.Port != 0)
            {
                Port = other.Port;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Protocol = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            System = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            Host = input.ReadString();
                            break;
                        }
                    case 32:
                        {
                            Port = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class InjectFailure : pb::IMessage<InjectFailure>
    {
        private static readonly pb::MessageParser<InjectFailure> _parser = new pb::MessageParser<InjectFailure>(() => new InjectFailure());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InjectFailure> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TCP.TestConductorProtocolReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InjectFailure()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InjectFailure(InjectFailure other) : this()
        {
            failure_ = other.failure_;
            direction_ = other.direction_;
            Address = other.address_ != null ? other.Address.Clone() : null;
            rateMBit_ = other.rateMBit_;
            exitValue_ = other.exitValue_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InjectFailure Clone()
        {
            return new InjectFailure(this);
        }

        /// <summary>Field number for the "failure" field.</summary>
        public const int FailureFieldNumber = 1;
        private global::TCP.FailType failure_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TCP.FailType Failure
        {
            get { return failure_; }
            set
            {
                failure_ = value;
            }
        }

        /// <summary>Field number for the "direction" field.</summary>
        public const int DirectionFieldNumber = 2;
        private global::TCP.Direction direction_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TCP.Direction Direction
        {
            get { return direction_; }
            set
            {
                direction_ = value;
            }
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 3;
        private global::TCP.Address address_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TCP.Address Address
        {
            get { return address_; }
            set
            {
                address_ = value;
            }
        }

        /// <summary>Field number for the "rateMBit" field.</summary>
        public const int RateMBitFieldNumber = 6;
        private float rateMBit_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float RateMBit
        {
            get { return rateMBit_; }
            set
            {
                rateMBit_ = value;
            }
        }

        /// <summary>Field number for the "exitValue" field.</summary>
        public const int ExitValueFieldNumber = 7;
        private int exitValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ExitValue
        {
            get { return exitValue_; }
            set
            {
                exitValue_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InjectFailure);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InjectFailure other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Failure != other.Failure) return false;
            if (Direction != other.Direction) return false;
            if (!object.Equals(Address, other.Address)) return false;
            if (RateMBit != other.RateMBit) return false;
            if (ExitValue != other.ExitValue) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Failure != 0) hash ^= Failure.GetHashCode();
            if (Direction != 0) hash ^= Direction.GetHashCode();
            if (address_ != null) hash ^= Address.GetHashCode();
            if (RateMBit != 0F) hash ^= RateMBit.GetHashCode();
            if (ExitValue != 0) hash ^= ExitValue.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Failure != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Failure);
            }
            if (Direction != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Direction);
            }
            if (address_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Address);
            }
            if (RateMBit != 0F)
            {
                output.WriteRawTag(53);
                output.WriteFloat(RateMBit);
            }
            if (ExitValue != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(ExitValue);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Failure != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Failure);
            }
            if (Direction != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Direction);
            }
            if (address_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
            }
            if (RateMBit != 0F)
            {
                size += 1 + 4;
            }
            if (ExitValue != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExitValue);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InjectFailure other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Failure != 0)
            {
                Failure = other.Failure;
            }
            if (other.Direction != 0)
            {
                Direction = other.Direction;
            }
            if (other.address_ != null)
            {
                if (address_ == null)
                {
                    address_ = new global::TCP.Address();
                }
                Address.MergeFrom(other.Address);
            }
            if (other.RateMBit != 0F)
            {
                RateMBit = other.RateMBit;
            }
            if (other.ExitValue != 0)
            {
                ExitValue = other.ExitValue;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            failure_ = (global::TCP.FailType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            direction_ = (global::TCP.Direction)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            if (address_ == null)
                            {
                                address_ = new global::TCP.Address();
                            }
                            input.ReadMessage(address_);
                            break;
                        }
                    case 53:
                        {
                            RateMBit = input.ReadFloat();
                            break;
                        }
                    case 56:
                        {
                            ExitValue = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
